[{"authors":["admin"],"categories":null,"content":"このブログはあくまで会社もしくはその社員としての公式見解の場ではありません。全ての記事は個人としての発言です。このブログでは、リアルタイムグラフィックス関連で、興味のあることを取り扱っていきたいと思います。\n以前の記事はこちらにあります。 https://shikihuiku.wordpress.com/\nThis BLOG is a place to express things which I’m interested in, especially related to computer graphics, not for a place to discuss about my work or company. All things noted on this BLOG are based on my personal views.\nThank you.\nOld site is here, https://shikihuiku.wordpress.com/\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://shikihuiku.github.io/author/shikihuiku/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/shikihuiku/","section":"authors","summary":"このブログはあくまで会社もしくはその社員としての公式見解の場","tags":null,"title":"shikihuiku","type":"authors"},{"authors":[],"categories":[],"content":"動機とか タイトルの画像は、今まで運用してきたWordpress上のサイトのスクリーンショットです。記念に撮ってきました。\n別にWordpressがいやになったという訳ではないのですが、Github pagesに移行したほうが制約も少なく扱いやすい気がしたので引っ越しすることにしました。Wordpressに書いた記事は、簡単に移行するのは難しそうなので、そのままにしておきます。\nHugo＋Academic 別に十分な検討をしてこの組み合わせに至ったわけでは無く、静的サイト生成ツール＋なんか都合の良いTheme程度の認識で選択しました。今後変えるかもしれません。 ただ、コンテンツは多少特殊な要素があったとしても、基本的にMarkdownで記述できるので、今後もしサイトを移行しようと思っても、記事の移行をあきらめたくなるような事はないのではないでしょうか。\n導入手順 せかっくなので自分なりの導入手順を記しておきます。環境はWindows10を使用しています。Hugoは導入済です。\nAcademicの導入 まず、Hugoのテーマとして、Academicを導入しようとして、以下の様にファイルを配置しましたが、上手くいきませんでした。\ngit submodule add https://github.com/gcushen/hugo-academic.git themes/academic   Academicのドキュメントを参照すると、Hugoの新規サイトの状態に加えて、いろいろなファイルが正しい位置に配置されている必要があるようで、 academic-kickstart.gitをクローンすることがおすすめのようです。 初めはプライベートリポジトリとして扱いたいですし、リポジトリの名前も変えたいので、cloneしてmirrorします。\ngit clone --bare https://github.com/sourcethemes/academic-kickstart.git cd academic-kickstart.git git push --mirror https://github.com/shikihuiku/blog.git  早速ローカルで初期状態を確認しようと思ったら、ビルドエラーが出ました。\n\u0026gt; hugo server Building sites … ERROR 2020/07/25 17:30:35 render of \u0026quot;term\u0026quot; failed: execute of template failed: template: authors/list.html:5:3: executing \u0026quot;authors/list.html\u0026quot; at \u0026lt;partial \u0026quot;site_head\u0026quot; .\u0026gt;: error calling partial: \u0026quot;T:\\GitHub\\hugotest\\blog\\themes\\academic\\layouts\\partials\\site_head.html:131:56\u0026quot;: execute of template failed: template: partials/site_head.html:131:56: executing \u0026quot;partials/site_head.html\u0026quot; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026quot;text/x-scss\u0026quot; and \u0026quot;text/css\u0026quot; ERROR 2020/07/25 17:30:35 render of \u0026quot;section\u0026quot; failed: execute of template failed: template: section/publication.html:5:3: executing \u0026quot;section/publication.html\u0026quot; at \u0026lt;partial \u0026quot;site_head\u0026quot; .\u0026gt;: error calling partial: \u0026quot;T:\\GitHub\\hugotest\\blog\\themes\\academic\\layouts\\partials\\site_head.html:131:56\u0026quot;: execute of template failed: template: partials/site_head.html:131:56: executing \u0026quot;partials/site_head.html\u0026quot; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026quot;text/x-scss\u0026quot; and \u0026quot;text/css\u0026quot; ERROR 2020/07/25 17:30:35 render of \u0026quot;home\u0026quot; failed: execute of template failed: template: index.html:5:3: executing \u0026quot;index.html\u0026quot; at \u0026lt;partial \u0026quot;site_head\u0026quot; .\u0026gt;: error calling partial: \u0026quot;T:\\GitHub\\hugotest\\blog\\themes\\academic\\layouts\\partials\\site_head.html:131:56\u0026quot;: execute of template failed: template: partials/site_head.html:131:56: executing \u0026quot;partials/site_head.html\u0026quot; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026quot;text/x-scss\u0026quot; and \u0026quot;text/css\u0026quot; ERROR 2020/07/25 17:30:35 render of \u0026quot;taxonomy\u0026quot; failed: execute of template failed: template: authors/terms.html:5:3: executing \u0026quot;authors/terms.html\u0026quot; at \u0026lt;partial \u0026quot;site_head\u0026quot; .\u0026gt;: error calling partial: \u0026quot;T:\\GitHub\\hugotest\\blog\\themes\\academic\\layouts\\partials\\site_head.html:131:56\u0026quot;: execute of template failed: template: partials/site_head.html:131:56: executing \u0026quot;partials/site_head.html\u0026quot; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026quot;text/x-scss\u0026quot; and \u0026quot;text/css\u0026quot; ERROR 2020/07/25 17:30:35 failed to render pages: render of \u0026quot;section\u0026quot; failed: execute of template failed: template: section/talk.html:5:3: executing \u0026quot;section/talk.html\u0026quot; at \u0026lt;partial \u0026quot;site_head\u0026quot; .\u0026gt;: error calling partial: \u0026quot;T:\\GitHub\\hugotest\\blog\\themes\\academic\\layouts\\partials\\site_head.html:131:56\u0026quot;: execute of template failed: template: partials/site_head.html:131:56: executing \u0026quot;partials/site_head.html\u0026quot; at \u0026lt;resources.Concat\u0026gt;: error calling Concat: resources in Concat must be of the same Media Type, got \u0026quot;text/x-scss\u0026quot; and \u0026quot;text/css\u0026quot; Built in 84 ms Error: Error building site: TOCSS: failed to transform \u0026quot;main_parsed.scss\u0026quot; (text/x-scss): resource \u0026quot;scss/scss/main.scss_76ac6956597c32fec7ddf60d408db3ab\u0026quot; not found in file cache  調べてみると、Academicには、hugo_extendedが必要だという事が分かりましたので、 Hugo_extendedのビルド済バイナリをDLします。 再びローカルサーバーを立ち上げると、今回は上手くビルドできました。\nhugo server  ローカルホストのポート1313にアクセスすると、おしゃれなサイトが表示されました。BiographyやProjectsやPublicationsなど、かなりハイスペック人材向けのテンプレートで尻込みしますが、どんどん削っていくことにします。\nAcademicのカスタマイズ ここで先人の知恵をお借りします\n Hugo + Academic テーマを使ったブログの作り方 https://qiita.com/harumaxy/items/58e7e4273c61e7e260b3\n /config/_default/フォルダに格納されている以下のtomlファイルを編集していきます。\n config.toml language.toml menus.toml params.toml  その他諸々の変更を行って、シンプルにBlogのポストができるページにしました。言語設定はenのまま使用する事にします。\nフォントの設定 デフォルトでは、GoogleのWebフォントがいろいろ指定されていますが、フォントの設定はシンプルな方が良いと思っています。 フォントのプリセットにNativeという設定があり、こちらを使うとrootのfont-familyの設定を、殆どの要素で使うようになるようです。config/_default/params.tomlでこれを指定します。\n font=\u0026quot;Native\u0026rdquo;\n rootにある、フォントの設定はとりあえず変更せずに使ってみます。\ncustom.scssの設定 デフォルトではブラウザの横幅に対してページの表示領域が酷く狭いです。\nblog/assets/scss/custom.scssというファイルを配置することで、自身で記述したcssをページに読み込ませる事が出来るようです。生成されたHTMLの要素のクラス名を確認して適当に設定しました。なんだか横幅を変えるだけで泥臭い作業になりました。もっと簡単にスタイルを変更する方法があるかもしれません。\n/*width for top page*/ .container { max-width: 90%; } /*width for posts.*/ .article-container{ max-width:90% }  また、見出しのフォントのWeightが一定では無いので変更します。ついでにマージンも変更します。 この辺りは素人なので、あまり参考になりませんが。 しかし、CSSを書いて変更できると結局楽だなってなって思ってきました\u0026hellip;\nh1, h2, h3, h4, h5, h6 { margin-top: 1.7rem; margin-bottom: 0.3rem; font-weight: 700; }  アイコンの設定 それから、Webサイトのアイコン、所謂ファビコンがデフォルトの設定では、Academicのアイコンになっているので変更します。\nassets/images/フォルダに、解像度512x512のicon.pngを配置します。\nGithub Pagesの設定 最後に、実際にビルドされたページをGithub Pagesでホスティングする方法ですが、一番簡単な方法はHugoの出力先をdocsフォルダにして、それをそのままリポジトリにPushして、GithubPagesで公開する方法だと思います。 Hugoはデフォルトではpublicフォルダにファイルが生成されるので、これを変更します。\nconfig/_default/config.tomlに以下の様に設定することで、docsフォルダにサイトが生成されるようになります。\npublishdir= \u0026quot;docs\u0026quot;  あとは、baseurlを設定しサイトを生成してエラーがでなければOKです。リポジトリにPushして、github pagesの設定をすれば公開されます。\nGithub Pagesの設定 - やっぱりPrivateリポジトリで 構築履歴が閲覧可能な状態なのは別に構わないですし、大抵の場合はDraft記事が閲覧可能な状態でも構わないのですが、一部のCEDECセッションの補間資料とかのDraftは会期以前に公開状態になるのはまずいので、 publishしたべージのコンテンツのみを公開状態にする必要があります。結局Hugoのpublishdirのディレクトリ以下を別のリポジトリにして、こちらだけPublicに設定して、ビルド環境はPrivateリポジトリにすることにしました。\n","date":1595462400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595462400,"objectID":"1a9a117957ea8d71e8aeec5a04f15ce9","permalink":"https://shikihuiku.github.io/post/hello_hugo_and_academic/","publishdate":"2020-07-23T00:00:00Z","relpermalink":"/post/hello_hugo_and_academic/","section":"post","summary":"永らくWordpressでダラダラと記事をPostしてきましたが、Wordpressであることのメリットがほとんど活かせてない状況です。自分は静的サイトが作れれば十分なので、引っ越すことにしました。","tags":["Hugo","Academic"],"title":"Hugo+Academicでブログを構築","type":"post"},{"authors":[],"categories":[],"content":"この記事は、旧サイトからテスト用に移植しました。  入力遅延の問題はゲーム開発において悩ましい問題の一つです。特にPCでは、他のプロセスが勝手な都合で動作しますし、リソースの競合も発生します。また、PC本体のCPU/GPUパフォーマンスの違いも大きいです。ここでは一般的なデスクトップPC上で、フォートナイトの描画がどのように実行されているかをソフトウェアの見地から、GPUViewを用いて観測してみます。ここで言う入力遅延は、Windows上のゲームのプロセスがキーやマウスのステートを取得すると思われるタイミングから、描画された画面が、ディスプレイへの出力対象になるまでを指します。実際には、マウスやキーボードのハードウェアとドライバにも遅延がありますし、ディスプレイにも実際に輝点として可視化されるまでに遅延がありますが、これらは今回は考慮しません。またゲームのプロセスが正確にいつ入力デバイスの情報を取得しているかは考慮しません。あるフレームのCPU処理の開始を入力取得時間として考えます。\nちなみに今回使用したデスクトップPCは、Core-i7 7700KとGeForce RTX2080Tiが搭載されています。モニタは一般的な60Hzの4Kディスプレイです。\nテストに使ったシーンは、クリエイティブの島です。描画としては極めて軽い状態がテスト対象です。\nUE4の開発者の方は、すでにご存じかと思いますが、以下の資料に入力遅延に関する詳しい解説がご覧いただけると思います。\n\n UE4のスレッドの流れと Input Latency改善の仕組み  from エピック・ゲームズ・ジャパン Epic Games Japan 今回は、フォートナイトをプレイする上でどのような設定が一番自分にとって好ましいかを調べる過程で分かったことを説明していきます。フォートナイトの描画設定で、入力遅延に関係のある設定は、フレームレートの上限値、VSync、それから、マルチスレッドレンダリングです。描画APIはD3D11と12に対応していますが、D3D12にすることによる利点があまり感じられなかったため、今回はD3D11のみをテストしています。\nVSync: OFF マルチスレッドレンダリング: OFF フレームレート上限: 60   vsyncoff_mtoff_60   おなじみのGPUViewのログです。詳しく見たい方はクリックして拡大してください。まずは、スレッドのアクティビティを理解するために一番簡単な例を示します。VSyncがOffなので、青い縦線で示されたVSyncのタイミングとは全く関係なく描画されています。描画スレッドが、D3D11の描画APIを呼び出して、Present()を呼び出し、GPUが描画を完了するのとほぼ同時にフロントバッファへのFlipが行われ、ディスプレイへの表示対象になります。ドライバのスレッドに描画命令を発行しているスレッドが、UE4のRHIスレッドと思われますが、マルチスレッドレンダリングをOffにしているので、Renderのスレッドが、直接RHIを呼び出しているのではないかと思われます。それに先立ち動作しているスレッドがゲームのメインスレッドと思われます。ゲームのメインスレッドは、Render/RHIスレッドに渡す描画情報を構築するタイミングと思われるところで、フレームレートのペーシングを行っていると思われます。計測された入力遅延は、12.8msですが、CPUもGPUもアイドル時間が長いので、処理クロックを落としていると思われます。実際の場合も何も小細工しなければ、ユーザーの知らないところでクロックが下がるので、今回はこの設定の入力遅延は12ms前後と考えます。\nVSync: OFF マルチスレッドレンダリング: ON フレームレート上限: 60 次は、先ほどの設定から、マルチスレッドレンダリングを有効にしてみます。他の設定は同じです。\n  vsyncoff_mton_60   見た目ががらりと変わっていますが、アイドリングしているWorkerスレッドにRenderと思われるスレッドが埋もれてしまったため、このような見た目になっています。実際は、どの設定でも多数のWorkerスレッドやサウンドのスレッドが立ち上げられていますが、描画に関係ないものは省略しています。先ほどの例と異なり、RHIのスレッドと思われるスレッドと、Renderと思われるスレッドが別になりました。基本的な仕組みや、遅延の状況はほぼ同じです。こちらもおそらく動作クロックが下がっているので、本来の描画パフォーマンスと比べると処理時間がかかっています。\nVSync: OFF マルチスレッドレンダリング: OFF フレームレート上限: 120   vsyncoff_mtoff_120   次は、再びマルチスレッドレンダリングをOFFに戻しました。そして、フレームレート上限を120にしてみました。基本的な動作は一番初めの例と同じですが、フレームのペーシングが8.3msになったことで、120FPSのレンダリングになりました。そして、アイドリングのデューティ比が変わったことにより、動作クロックが引き上げられた関係で、入力遅延も短縮され、9.5ms程度になりました。\nVSync: OFF マルチスレッドレンダリング: ON フレームレート上限: 120 次は、上記の設定でマルチスレッドレンダリングをONにします。   vsyncoff_mton_120   やはり、RenderスレッドとRHIスレッドが分かれました。今回のテスト対象になっているシーンは軽いので、マルチスレッドレンダリングの恩恵は少ないですが、もっと複雑なシーンでは、これらのスレッドが並列動作することにより、Renderスレッドの描画命令発行によるストールが軽減され、より顕著な差になると思われます。少なくとも遅くなることはなさそうなので、私はこの設定でプレイすることにします。\nVSync: ON マルチスレッドレンダリング: OFF フレームレート上限: 制限なし 次は、いわゆる、VSyncを守って、画面のティアリングを起こさない描画になります。見た目は一番スムーズなのですが、入力遅延の観点からはあまりお勧めできない設定となりそうです。   vsyncon_mtoff_60   まず、VSyncを取ると、メインスレッドの動作がかなり変わります。およそ2ms単位でスレッドをポーリングしながら、処理開始のタイミングを計っているようです。rhi.SyncSlackMSのデフォルト設定と思われる、VSyncの10ms前に、メインスレッドの処理を開始しています。Renderスレッドは、前の前のフレームのGPU描画処理が完了してから、RHIの呼び出しを開始しているようです。そして、RHIが呼び出すD3DAPIによって生成されたGPUタスクは、ドライバのGPUタスクキューに積み上げられます。そのフレームのGPU描画処理がGPU上で実行されるのは、Renderスレッドが動作したフレームの次の次のフレームです。そして、ディスプレイの出力対象になるFlipが行われるのは、VSyncに同期しているので、実際の表示はその次のフレームとなります。メインスレッドが動作を開始してから、ディスプレイの出力対象になるまでの入力遅延は60msほどとなります。\nまとめ 少なくとも私の環境では、VSyncをOFFにして、CPUのフレームペーシングがボトルネックになる状態（つまりGPUの処理時間には余裕がある状態）で、なるべく高いフレームレートが入力遅延が一番小さくなる状態だといえると思います。入力遅延を最短にするという目的ならば、私のPCでは、おそらく200フレーム以上の設定の方が短くなると思われます。しかし、使用しているディスプレイも60Hzですし、描画解像度など他の設定に妥協が必要になります。 また、これらの状況は、個々のPCの、CPUとGPUの処理能力のバランスによって変動するので、皆さんに一概にこの設定がおすすめですとはなりません。しかし、VSyncはOff、なるべく早いCPU、なるべく早いGPU、なるべく軽い描画が、入力遅延低減につながると思われます。\n","date":1592238782,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592238782,"objectID":"117dad02d1f9ebb737d4f2c72538fd7f","permalink":"https://shikihuiku.github.io/post/check_input_latency_of_fortnite/","publishdate":"2020-06-16T01:33:02+09:00","relpermalink":"/post/check_input_latency_of_fortnite/","section":"post","summary":"タイトルは緩いですけど、ゲーム開発者向けの話です。プラットフォームはPC限定です。","tags":["DX11","GPUView","UE4","Fortnite"],"title":"フォートナイトの入力遅延を観測してみた","type":"post"}]